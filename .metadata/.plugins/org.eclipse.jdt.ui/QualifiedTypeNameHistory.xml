<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<qualifiedTypeNameHistroy>
<fullyQualifiedTypeName name="lombok.AllArgsConstructor"/>
<fullyQualifiedTypeName name="lombok.NoArgsConstructor"/>
<fullyQualifiedTypeName name="lombok.ToString"/>
<fullyQualifiedTypeName name="javax.persistence.GeneratedValue"/>
<fullyQualifiedTypeName name="org.springframework.data.rest.core.annotation.RepositoryRestResource"/>
<fullyQualifiedTypeName name="org.springframework.stereotype.Component"/>
<fullyQualifiedTypeName name="org.springframework.boot.CommandLineRunner"/>
<fullyQualifiedTypeName name="com.example.demo.ItemInitializer"/>
<fullyQualifiedTypeName name="com.example.demo.ItemRepository"/>
<fullyQualifiedTypeName name="java.util.stream.Stream"/>
<fullyQualifiedTypeName name="java.lang.System"/>
<fullyQualifiedTypeName name="org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker"/>
<fullyQualifiedTypeName name="org.springframework.cloud.netflix.zuul.EnableZuulProxy"/>
<fullyQualifiedTypeName name="lombok.Data"/>
<fullyQualifiedTypeName name="com.google.common.io.Resources"/>
<fullyQualifiedTypeName name="javax.annotation.Resource"/>
<fullyQualifiedTypeName name="com.netflix.client.util.Resources"/>
<fullyQualifiedTypeName name="javax.annotation.Resources"/>
<fullyQualifiedTypeName name="org.springframework.hateoas.Resources"/>
<fullyQualifiedTypeName name="com.example.demo.ItemClient"/>
<fullyQualifiedTypeName name="java.util.Collection"/>
<fullyQualifiedTypeName name="java.util.stream.Collectors"/>
<fullyQualifiedTypeName name="org.springframework.cloud.config.server.EnableConfigServer"/>
<fullyQualifiedTypeName name="javax.persistence.Entity"/>
<fullyQualifiedTypeName name="javax.persistence.Id"/>
<fullyQualifiedTypeName name="javax.persistence.Column"/>
<fullyQualifiedTypeName name="org.springframework.data.jpa.repository.JpaRepository"/>
<fullyQualifiedTypeName name="org.springframework.core.env.Environment"/>
<fullyQualifiedTypeName name="com.in28minutes.springboot.microservice.example.forex.ExchangeValueRepository"/>
<fullyQualifiedTypeName name="com.in28minutes.springboot.microservice.example.forex.ExchangeValue"/>
<fullyQualifiedTypeName name="org.apache.logging.log4j.Logger"/>
<fullyQualifiedTypeName name="org.slf4j.LoggerFactory"/>
<fullyQualifiedTypeName name="org.slf4j.Logger"/>
<fullyQualifiedTypeName name="java.math.BigDecimal"/>
<fullyQualifiedTypeName name="java.util.Map"/>
<fullyQualifiedTypeName name="java.util.HashMap"/>
<fullyQualifiedTypeName name="org.springframework.http.ResponseEntity"/>
<fullyQualifiedTypeName name="org.springframework.web.client.RestTemplate"/>
<fullyQualifiedTypeName name="org.springframework.cloud.openfeign.EnableFeignClients"/>
<fullyQualifiedTypeName name="org.springframework.cloud.client.discovery.EnableDiscoveryClient"/>
<fullyQualifiedTypeName name="org.springframework.web.bind.annotation.RestController"/>
<fullyQualifiedTypeName name="org.springframework.cloud.openfeign.FeignClient"/>
<fullyQualifiedTypeName name="org.springframework.web.bind.annotation.PathVariable"/>
<fullyQualifiedTypeName name="org.springframework.web.bind.annotation.GetMapping"/>
<fullyQualifiedTypeName name="com.in28minutes.springboot.microservice.example.currencyconversion.CurrencyExchangeServiceProxy"/>
<fullyQualifiedTypeName name="org.springframework.beans.factory.annotation.Autowired"/>
<fullyQualifiedTypeName name="com.in28minutes.springboot.microservice.example.currencyconversion.CurrencyConversionBean"/>
<fullyQualifiedTypeName name="org.springframework.cloud.netflix.ribbon.RibbonClient"/>
<fullyQualifiedTypeName name="org.springframework.cloud.netflix.eureka.server.EnableEurekaServer"/>
</qualifiedTypeNameHistroy>
